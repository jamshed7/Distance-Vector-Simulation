# def displayRoutingTable(self):
#     print(f"Routing Table for Node: {self.id}")
#
#     print("-----------------------------------")
#
#     for node_id in sorted(self.routingTable):
#         print(f"Destination Node: {node_id}     Route to Node: {self.routingTable[node_id]}")
#
#     print("===================================")
#
#
# def displayDistanceTable(self):
#     print(f"Distance Vector Table for Node: {self.id}")
#     print("-----------------------------------")
#
#     for node_id in sorted(self.distanceTable):
#         print(f"From Node: {self.id}    To Node: {node_id}     Shortest Distance: {self.distanceTable[node_id]}")
#     print("-----------------------------------")


# def displayTables(self):
#     print(f"Node {self.id}")
#     print("-----------------------------------")
#     for node_id in sorted(self.distanceTable):
#         print(f"Destination Node: {node_id}     Shortest Distance: {self.distanceTable[node_id]}    Route to Node: {self.routingTable[node_id]}")
#     print("-----------------------------------")

# def updateDistanceTable(self):
#
#     for neighbor_id, cost in self.neighbors:
#         # get neighbor object
#         neighbor = Node.findNode(neighbor_id)
#
#         for node, distance in self.distanceTable.items():
#             originalDistance = self.distanceTable[node]
#             self.distanceTable[node] = str( min( int( self.distanceTable[node] ), neighbor.getDistanceToNode(node) + int(cost) ) )
#
#             # if routing through this neighbor is shorter, update routing information
#             if self.distanceTable[node] != originalDistance:
#                 self.routingTable[node] = neighbor_id
